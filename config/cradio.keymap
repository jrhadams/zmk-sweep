/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "keymap_italian.h"

// OS definition (before sourcing helper)
#define HOST_OS 2
#include "../zmk-nodefree-config/helper.h"

// Layer definitions
    #define BASE 0
    #define SYM 1
    #define EXT 2
    #define FNC 3
    #define SYM2 4
    #define ACCENT 5
		#define SETTINGS 6
// -----------------

&mt {
   //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

&sk {
    ignore-modifiers;
};

/ {
		macros {
				// sometimes my device thinks a modifier is being held down
				// pressing all modifiers fixes it.
				unstick: unstick {
					label = "ZM_unstick";
					compatible = "zmk,behavior-macro";
					#binding-cells = <0>;
					bindings
						= <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
				};
				assign_left: assign_left {
					label = "ZM_assign_left";
            				compatible = "zmk,behavior-macro";
            				#binding-cells = <0>;
            				bindings
                				= <&kp LT &kp MINUS>;
        			};
				assign_right: assign_right {
					label = "ZM_assign_right";
            				compatible = "zmk,behavior-macro";
            				#binding-cells = <0>;
            				bindings
                				= <&kp MINUS &kp GT>;
        			};
				both_curly: both_curly {
					label = "ZM_both_curly";
            				compatible = "zmk,behavior-macro";
            				#binding-cells = <0>;
            				bindings
                				= <&kp LBRC &kp RBRC>;
        			};
				both_curvy: both_curvy {
					label = "ZM_both_curvy";
            				compatible = "zmk,behavior-macro";
            				#binding-cells = <0>;
            				bindings
                				= <&kp LPAR &kp RPAR>;
        			};
				both_bracky: both_bracky {
					label = "ZM_both_bracky";
            				compatible = "zmk,behavior-macro";
            				#binding-cells = <0>;
            				bindings
                				= <&kp LBKT &kp RBKT>;
        			};
	};

    combos {
        compatible = "zmk,combos";
				// both right thumb keys
        combo_accent {
            timeout-ms = <300>;
            key-positions = <32 33>;
            bindings = <&mo ACCENT>;
        };
				// internal-left & -right thumb keys
				combo_sym2 {
						timeout-ms = <200>;
						key-positions = <31 34>;
						bindings = <&kp ENTER>;
				};
				// both left thumb keys
				combo_settings {
						timeout-ms = <300>;
						key-positions = <30 31>;
						bindings = <&mo SETTINGS>;
				};
    };
    
    behaviors {
    	td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
	
	td_caps: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MOD_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LSHIFT>, <&kp CAPSLOCK>;
        };
	
	td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N1>, <&kp N2>, <&kp N3>;
        };
	
	td_tab: tap_tab {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAB";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp SPACE>, <&kp ENTER>;
        };
	
	td_dollar: tap_dollar {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DOLLAR";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp DOLLAR>, <&kp PERCENT>;
        };
	
	td_hash: tap_hash {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_HASH";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp HASH>, <&kp TILDE>;
        };
	
	
	
	td_minus: tap_minus_under {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_MINUS_UNDER";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp MINUS>, <&kp UNDER>;
        };
	
	td_delete: tap_delete_or_jump {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DELETE_OR_JUMP";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&to EXT>, <&kp BSPC>;
        };
	
	
	td_cp: tap_copy_and_paste {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_COPY_AND_PASTE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LC(C)>, <&kp LC(V)>;
        };
	
	
	td_back: tap_dance_back_space_s {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BACK_SPACE_S";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&mt BSPC S>, <&kp BSPC>;
        };
	
	hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
            compatible = "zmk,keymap";

        // Base alpha layer
       		default_layer {
		bindings = <
		&kp SQT &kp COMMA &kp DOT &kp P &kp Y        &kp F &kp G  &kp C &kp R &kp L 
		&hm ESC A &kp O &mt LSHIFT E &kp U &kp I         	        &kp D &kp H  &mt LSHIFT T &kp N &kp S
		&kp SEMI &kp Q &kp J &kp K &kp X                &kp B &kp M  &kp W &kp V &kp Z
                      &kp LSHIFT    &sl EXT                &sl SYM  &kp SPACE
		>;
		};

        // Numbers and high frequency symbols
       		sym_layer {
		bindings = <
		&kp BACKSLASH  &trans &trans &kp AMPS  &kp PIPE             &kp TILDE  &kp STAR &kp PLUS &kp MINUS &kp SLASH 
		&kp N1 &kp N2 &kp N3 &kp N4 &kp N5		                      &kp N6 &kp N7 &mt LSHIFT N8 &kp N9 &kp N0
		&assign_left &kp CARET   &kp UNDER   &kp MINUS   &kp COLON            &kp QUESTION  &both_bracky  &both_curvy  &both_curly &assign_right
					&kp BSPC  &kp LSHIFT               &sl FNC &kp CARET
		>;
		};

        // Main modifiers and arrow keys
		    ext_layer {
		bindings = <
		&kp GRAVE  &sk LALT &sk LSHIFT   &sk LCTRL  &kp LC(Z) 			&kp PG_UP  &kp HOME &kp UP &kp END &kp CAPS
		&sk LA(LSHIFT) &sk LC(LSHIFT)   &sk LC(LALT) &kp TAB  &kp LC(TAB)        	&kp PG_DN &kp LEFT  &kp BSPC  &kp RIGHT   &kp DEL
		&trans  &kp LG(ENTER) &kp LGUI &kp LG(SPACE)  &sk LCTRL                      &kp LC(BSPC) &trans &kp DOWN &trans  &trans
					                        &trans &kp LCTRL    &sk LALT &kp ENTER  
		>;
		};

        // Function keys with modifiers
       		fnc_layer {
		bindings = <
		&kp F1 &kp F2 &kp F3 &kp F4 &kp F5                  &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 
		&sk LALT &sk LSHIFT  &sk LGUI &sk LCTRL &kp RALT     &kp F11 &kp F12  &kp PRINTSCREEN &trans &trans
		&none &none &none &none &none				          &none &none &none &none &none 
          				           &none &sk LALT              &none &to BASE
		>;
		};

        // Low frequency symbols.
       		symbols_2_layer {
		bindings = <
		&kp IT_CARET &kp IT_UNDER &kp IT_PND &kp IT_EUR &kp IT_HASH         &none &none &none &none &none 
		&kp IT_BKTK &kp IT_TILDE &kp IT_BSLH &kp IT_PIPE &kp IT_AND         &none &none &none &none &none
		&none 			&none 			 &kp IT_SECT &kp IT_CCED &kp IT_DEG				  &none &none &none &none &none
          				           												&none &none        	&none &none 
		>;
		};

        // Used to type regional accents.
       		accent_layer {
		bindings = <
		&none &none &none &kp IT_CEGR &none                         &none &none &none &none &none 
		&kp IT_AGRV &kp IT_IGRV &kp IT_OGRV &kp IT_EGRV &kp IT_EACU &none &none &none &none &none
		&none &none &none &kp IT_UGRV &none                         &none &none &none &none &none
          				     &none &none                         &none &none 
		>;
		};

        // Used to change the keyboard's settings.
       		settings_layer {
		bindings = <
		&bootloader &none &none &bt BT_CLR &bt BT_SEL 0               &bt BT_SEL 3 &none &unstick &none &bootloader 
		&none &none &none &none      &bt BT_SEL 1 						  &bt BT_SEL 4 &none &none &none &none
		&none &none &none &none      &bt BT_SEL 2               &bt BT_SEL 5 &none &none &none &none
          				     &none &none                         &none &to BASE
		>;
		};
        
	};
};
